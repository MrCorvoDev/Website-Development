//=======================================================================================================================================================================================================================================================
/**
 * При изменении размера экрана к body добавляется .js_s-resize
 * Доступ к экземпляру: document._app_.resize
 */
//=======================================================================================================================================================================================================================================================
import _dom from "../exports/dom.js";
import {throttle} from "../exports/lodash.js";
//=======================================================================================================================================================================================================================================================
/**
 * Класс представляющий Resize
 * @class
 */
class Resize {
   /** Префикс для имени события */
   static #eventPrefix = "_app_.resize.";
   /** Объект с полными названиями событий */
   static events = {
      onChange: this.#eventPrefix + "onChange",
   };
   /** Объект с экземплярами событий */
   static #events = {
      /** Вызывается после любого изменения в `Resize` */
      onChange: new Event(this.events.onChange, {bubbles: true, cancelable: true}),
   };
   /** Флаг, указывающий, добавлен ли обработчик событий */
   static #isThereEventListener;
   /** Таймер для выключения статуса resize */
   #timer;
   /** Добавить статус resize */
   #applyResizeStatus() {
      const resize = document._app_.resize;
      resize.is = true;

      _dom.el.add("resize");
      clearTimeout(resize.#timer);
      document.body.dispatchEvent(Resize.#events.onChange);

      resize.#timer = setTimeout(() => {
         resize.is = false;
         _dom.el.del("resize");
         document.body.dispatchEvent(Resize.#events.onChange);
      }, 300);
   }
   /** Флаг, указывающий статус resize */
   is = false;
   /** Добавляет обработчик события */
   constructor() {
      if (Resize.#isThereEventListener) return;
      document._app_ ??= {};
      document._app_.resize = this;

      Resize.#isThereEventListener = true;

      throttle("resize", 250, this.#applyResizeStatus);
   }
}
//=======================================================================================================================================================================================================================================================
new Resize();
//=======================================================================================================================================================================================================================================================